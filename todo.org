Lifoo
* add dump-lines like slurp lines
** add stream-string to get string from stream
("abc" "def" "ghi") stream (pop) dump-lines
stream-string
- "abc~%def~%ghi~%"

* add hash-tables
** create with equal
** add hash-table word
** add get word
*** add set/del support
** add put word
*** implement as get set
** add support for hash tables in list
** add sort word
*** use arg as key and compare as predicate
hash-table 
:abc 1 put 
:def 2 put  
:ghi 3 put
list (first) sort
- '((1 . :abc) (2 . :def) (3 . :ghi))

* add net package
** add fetch word based on drakma
(let ((stream (drakma:http-request "https://api.github.com/orgs/edicl/public_members"
                                      :want-stream t)))
    (setf (flexi-streams:flexi-stream-external-format stream) :utf-8)
* add each word
0 '(1 2 3) (swap inc swap) each drop
- 3
* add local-time support
** now / today for current time
** date / time constructing

(define-lifoo-init (:foo :bar)
 (define-word :baz (nil) 39 +)) lisp eval
