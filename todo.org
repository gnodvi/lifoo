(cl4l-test:run-suite '(:lifoo) :reps 3)

* add arg to hash-table like list
** add support for assoc list

* add stash/apply to push / pop between stack and stash
** use instead of var in put

* switch to index for storing words
** create with nil key
** add args to word again
*** store least specific type that is accepted or nil if any
** unique? t
** add words with id & args
** search for id when finding
*** run first type match
** add *lifoo-word-idx* defparam
** assign incf to word.idx
* add net package
** add fetch word based on drakma
(let ((stream (drakma:http-request "https://api.github.com/orgs/edicl/public_members"
                                      :want-stream t)))
    (setf (flexi-streams:flexi-stream-external-format stream) :utf-8)
* add each word
0 '(1 2 3) (swap inc swap) each drop
- 3
* add local-time support
** now / today for current time
** date / time constructing

(define-lifoo-init (:foo :bar)
 (define-word :baz (nil) 39 +)) lisp eval
